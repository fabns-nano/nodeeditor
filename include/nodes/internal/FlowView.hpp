#pragma once

#include <QtWidgets/QGraphicsView>

#include "Export.hpp"

class QMenu;

namespace QtNodes
{

class FlowScene;
class NodeGraphicsObject;
class GroupGraphicsObject;

/**
 * @brief The FlowView class controls the display of the FlowScene in the UI.
 * It is responsible for mediating the user interaction with the scene and
 * managing the UI overlays, such as context menus for nodes.
 */
class NODE_EDITOR_PUBLIC FlowView
  : public QGraphicsView
{
  Q_OBJECT
public:

  FlowView(QWidget *parent = Q_NULLPTR);
  FlowView(FlowScene *scene, QWidget *parent = Q_NULLPTR);

  FlowView(const FlowView&) = delete;
  FlowView operator=(const FlowView&) = delete;

  QAction* clearSelectionAction() const;

  QAction* deleteSelectionAction() const;

  /**
   * @brief Returns the "copy selection" action.
   */
  QAction* copySelectionAction() const;

  /**
   * @brief Returns the "cut selection" action.
   */
  QAction* cutSelectionAction() const;

  /**
   * @brief Returns the "paste from clipboard" action.
   */
  QAction* pasteClipboardAction() const;

  void setScene(FlowScene *scene);

public Q_SLOTS:

  void scaleUp();

  void scaleDown();

  void deleteSelectedNodes();

  /**
   * @brief Manages the available actions when there is a change in the
   * scene's selected items.
   */
  void handleSelectionChanged();

protected:
  /**
   * @brief Creates a context menu when the user right-clicks a group area.
   * @param event Event generated by Qt when the context menu is opened.
   * @param ggo Graphical object of the group that was clicked.
   */
  void groupContextMenu(QContextMenuEvent *event, GroupGraphicsObject* ggo);

  /**
   * @brief Creates a context menu when the user right-clicks a node.
   * @param event Event generated by Qt when the context menu is opened.
   * @param ngo Graphical object of the node that was clicked.
   */
  void nodeContextMenu(QContextMenuEvent *event, NodeGraphicsObject* ngo);

  /**
   * @brief Copies the selected scene items to the clipboard.
   */
  void copySelectionToClipboard();

  /**
   * @brief Cuts the selected scene items to the clipboard.
   */
  void cutSelectionToClipboard();

  /**
   * @brief Pastes the stored clipboard items to the scene.
   */
  void pasteFromClipboard();

  void contextMenuEvent(QContextMenuEvent *event) override;

  void wheelEvent(QWheelEvent *event) override;

  void keyPressEvent(QKeyEvent *event) override;

  void keyReleaseEvent(QKeyEvent *event) override;

  void mousePressEvent(QMouseEvent *event) override;

  void mouseMoveEvent(QMouseEvent *event) override;

  void drawBackground(QPainter* painter, const QRectF& r) override;

  void showEvent(QShowEvent *event) override;

protected:

  FlowScene * scene();

private:

  QAction* _clearSelectionAction;
  QAction* _deleteSelectionAction;

  /**
   * @brief _copySelectionAction Action that triggers copying the selected scene items to the clipboard.
   */
  QAction* _copySelectionAction;

  /**
   * @brief _cutSelectionAction Action that triggers cutting the selected scene items to the clipboard.
   */
  QAction* _cutSelectionAction;

  /**
   * @brief _pasteClipboardAction Action that triggers pasting of the stored clipboard on the scene.
   */
  QAction* _pasteClipboardAction;

  QPointF _clickPos;

  FlowScene* _scene;

  QByteArray _clipboard;
};
}
